// Code generated by protoc-gen-gogo.
// source: github.com/fuserobotics/rethinkts/metric/metric.proto
// DO NOT EDIT!

package metric

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import common "github.com/fuserobotics/proto/common"

import errors "errors"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MetricSeries_MetricDataType int32

const (
	MetricSeries_NUMBER MetricSeries_MetricDataType = 0
)

var MetricSeries_MetricDataType_name = map[int32]string{
	0: "NUMBER",
}
var MetricSeries_MetricDataType_value = map[string]int32{
	"NUMBER": 0,
}

func (x MetricSeries_MetricDataType) String() string {
	return proto.EnumName(MetricSeries_MetricDataType_name, int32(x))
}
func (MetricSeries_MetricDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMetric, []int{1, 0}
}

type MetricSeries_MetricDeduplicationStrategy int32

const (
	// Don't allow two points with same timestamp by default
	MetricSeries_NONE MetricSeries_MetricDeduplicationStrategy = 0
	// Create a column with 'nonce', expects all incoming lines to have a nonce hash.
	MetricSeries_NONCE MetricSeries_MetricDeduplicationStrategy = 1
)

var MetricSeries_MetricDeduplicationStrategy_name = map[int32]string{
	0: "NONE",
	1: "NONCE",
}
var MetricSeries_MetricDeduplicationStrategy_value = map[string]int32{
	"NONE":  0,
	"NONCE": 1,
}

func (x MetricSeries_MetricDeduplicationStrategy) String() string {
	return proto.EnumName(MetricSeries_MetricDeduplicationStrategy_name, int32(x))
}
func (MetricSeries_MetricDeduplicationStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMetric, []int{1, 1}
}

type MetricSeries_MetricTagMeta_MetricTagIndexType int32

const (
	MetricSeries_MetricTagMeta_NONE     MetricSeries_MetricTagMeta_MetricTagIndexType = 0
	MetricSeries_MetricTagMeta_STANDARD MetricSeries_MetricTagMeta_MetricTagIndexType = 1
	MetricSeries_MetricTagMeta_GEOPOINT MetricSeries_MetricTagMeta_MetricTagIndexType = 2
)

var MetricSeries_MetricTagMeta_MetricTagIndexType_name = map[int32]string{
	0: "NONE",
	1: "STANDARD",
	2: "GEOPOINT",
}
var MetricSeries_MetricTagMeta_MetricTagIndexType_value = map[string]int32{
	"NONE":     0,
	"STANDARD": 1,
	"GEOPOINT": 2,
}

func (x MetricSeries_MetricTagMeta_MetricTagIndexType) String() string {
	return proto.EnumName(MetricSeries_MetricTagMeta_MetricTagIndexType_name, int32(x))
}
func (MetricSeries_MetricTagMeta_MetricTagIndexType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMetric, []int{1, 1, 0}
}

// Used to identify a stored metric
type MetricIdentifier struct {
	// Use a string identifier for now.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MetricIdentifier) Reset()                    { *m = MetricIdentifier{} }
func (m *MetricIdentifier) String() string            { return proto.CompactTextString(m) }
func (*MetricIdentifier) ProtoMessage()               {}
func (*MetricIdentifier) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{0} }

type MetricSeries struct {
	Id             string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title          string                                   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description    string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DataType       MetricSeries_MetricDataType              `protobuf:"varint,5,opt,name=data_type,json=dataType,proto3,enum=metric.MetricSeries_MetricDataType" json:"data_type,omitempty"`
	TagMeta        map[string]*MetricSeries_MetricTagMeta   `protobuf:"bytes,6,rep,name=tag_meta,json=tagMeta" json:"tag_meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	DedupeStrategy MetricSeries_MetricDeduplicationStrategy `protobuf:"varint,7,opt,name=dedupe_strategy,json=dedupeStrategy,proto3,enum=metric.MetricSeries_MetricDeduplicationStrategy" json:"dedupe_strategy,omitempty"`
}

func (m *MetricSeries) Reset()                    { *m = MetricSeries{} }
func (m *MetricSeries) String() string            { return proto.CompactTextString(m) }
func (*MetricSeries) ProtoMessage()               {}
func (*MetricSeries) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{1} }

func (m *MetricSeries) GetTagMeta() map[string]*MetricSeries_MetricTagMeta {
	if m != nil {
		return m.TagMeta
	}
	return nil
}

type MetricSeries_MetricTagMeta struct {
	Index       MetricSeries_MetricTagMeta_MetricTagIndexType `protobuf:"varint,1,opt,name=index,proto3,enum=metric.MetricSeries_MetricTagMeta_MetricTagIndexType" json:"index,omitempty"`
	Title       string                                        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                                        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *MetricSeries_MetricTagMeta) Reset()         { *m = MetricSeries_MetricTagMeta{} }
func (m *MetricSeries_MetricTagMeta) String() string { return proto.CompactTextString(m) }
func (*MetricSeries_MetricTagMeta) ProtoMessage()    {}
func (*MetricSeries_MetricTagMeta) Descriptor() ([]byte, []int) {
	return fileDescriptorMetric, []int{1, 1}
}

type MetricDatapoint struct {
	Timestamp int64               `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Location  *common.GeoLocation `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	Tags      map[string]string   `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Value     float64             `protobuf:"fixed64,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MetricDatapoint) Reset()                    { *m = MetricDatapoint{} }
func (m *MetricDatapoint) String() string            { return proto.CompactTextString(m) }
func (*MetricDatapoint) ProtoMessage()               {}
func (*MetricDatapoint) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{2} }

func (m *MetricDatapoint) GetLocation() *common.GeoLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *MetricDatapoint) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type MetricDatapointWithMeta struct {
	Datapoint *MetricDatapoint  `protobuf:"bytes,1,opt,name=datapoint" json:"datapoint,omitempty"`
	Metric    *MetricIdentifier `protobuf:"bytes,2,opt,name=metric" json:"metric,omitempty"`
}

func (m *MetricDatapointWithMeta) Reset()                    { *m = MetricDatapointWithMeta{} }
func (m *MetricDatapointWithMeta) String() string            { return proto.CompactTextString(m) }
func (*MetricDatapointWithMeta) ProtoMessage()               {}
func (*MetricDatapointWithMeta) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{3} }

func (m *MetricDatapointWithMeta) GetDatapoint() *MetricDatapoint {
	if m != nil {
		return m.Datapoint
	}
	return nil
}

func (m *MetricDatapointWithMeta) GetMetric() *MetricIdentifier {
	if m != nil {
		return m.Metric
	}
	return nil
}

// Various ways to query a series
type MetricDatapointQuery struct {
	TimeConstraint *MetricDatapointQuery_MetricDatapointTimeConstraint `protobuf:"bytes,1,opt,name=time_constraint,json=timeConstraint" json:"time_constraint,omitempty"`
	TagConstraint  *MetricDatapointQuery_MetricDatapointTagConstraint  `protobuf:"bytes,2,opt,name=tag_constraint,json=tagConstraint" json:"tag_constraint,omitempty"`
}

func (m *MetricDatapointQuery) Reset()                    { *m = MetricDatapointQuery{} }
func (m *MetricDatapointQuery) String() string            { return proto.CompactTextString(m) }
func (*MetricDatapointQuery) ProtoMessage()               {}
func (*MetricDatapointQuery) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{4} }

func (m *MetricDatapointQuery) GetTimeConstraint() *MetricDatapointQuery_MetricDatapointTimeConstraint {
	if m != nil {
		return m.TimeConstraint
	}
	return nil
}

func (m *MetricDatapointQuery) GetTagConstraint() *MetricDatapointQuery_MetricDatapointTagConstraint {
	if m != nil {
		return m.TagConstraint
	}
	return nil
}

type MetricDatapointQuery_MetricDatapointTimeConstraint struct {
	// If zero, ignored
	MinTime int64 `protobuf:"varint,1,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
	// If zero, ignored
	MaxTime int64 `protobuf:"varint,2,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
}

func (m *MetricDatapointQuery_MetricDatapointTimeConstraint) Reset() {
	*m = MetricDatapointQuery_MetricDatapointTimeConstraint{}
}
func (m *MetricDatapointQuery_MetricDatapointTimeConstraint) String() string {
	return proto.CompactTextString(m)
}
func (*MetricDatapointQuery_MetricDatapointTimeConstraint) ProtoMessage() {}
func (*MetricDatapointQuery_MetricDatapointTimeConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptorMetric, []int{4, 0}
}

type MetricDatapointQuery_MetricDatapointTagConstraint struct {
	Tags map[string]*MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MetricDatapointQuery_MetricDatapointTagConstraint) Reset() {
	*m = MetricDatapointQuery_MetricDatapointTagConstraint{}
}
func (m *MetricDatapointQuery_MetricDatapointTagConstraint) String() string {
	return proto.CompactTextString(m)
}
func (*MetricDatapointQuery_MetricDatapointTagConstraint) ProtoMessage() {}
func (*MetricDatapointQuery_MetricDatapointTagConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptorMetric, []int{4, 1}
}

func (m *MetricDatapointQuery_MetricDatapointTagConstraint) GetTags() map[string]*MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag struct {
	// List of acceptable values
	Value []string `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag) Reset() {
	*m = MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag{}
}
func (m *MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag) String() string {
	return proto.CompactTextString(m)
}
func (*MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag) ProtoMessage() {
}
func (*MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag) Descriptor() ([]byte, []int) {
	return fileDescriptorMetric, []int{4, 1, 1}
}

func init() {
	proto.RegisterType((*MetricIdentifier)(nil), "metric.MetricIdentifier")
	proto.RegisterType((*MetricSeries)(nil), "metric.MetricSeries")
	proto.RegisterType((*MetricSeries_MetricTagMeta)(nil), "metric.MetricSeries.MetricTagMeta")
	proto.RegisterType((*MetricDatapoint)(nil), "metric.MetricDatapoint")
	proto.RegisterType((*MetricDatapointWithMeta)(nil), "metric.MetricDatapointWithMeta")
	proto.RegisterType((*MetricDatapointQuery)(nil), "metric.MetricDatapointQuery")
	proto.RegisterType((*MetricDatapointQuery_MetricDatapointTimeConstraint)(nil), "metric.MetricDatapointQuery.MetricDatapointTimeConstraint")
	proto.RegisterType((*MetricDatapointQuery_MetricDatapointTagConstraint)(nil), "metric.MetricDatapointQuery.MetricDatapointTagConstraint")
	proto.RegisterType((*MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag)(nil), "metric.MetricDatapointQuery.MetricDatapointTagConstraint.MetricDatapointTagConstraintTag")
	proto.RegisterEnum("metric.MetricSeries_MetricDataType", MetricSeries_MetricDataType_name, MetricSeries_MetricDataType_value)
	proto.RegisterEnum("metric.MetricSeries_MetricDeduplicationStrategy", MetricSeries_MetricDeduplicationStrategy_name, MetricSeries_MetricDeduplicationStrategy_value)
	proto.RegisterEnum("metric.MetricSeries_MetricTagMeta_MetricTagIndexType", MetricSeries_MetricTagMeta_MetricTagIndexType_name, MetricSeries_MetricTagMeta_MetricTagIndexType_value)
}
func (m *MetricIdentifier) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricIdentifier) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintMetric(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	return i, nil
}

func (m *MetricSeries) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricSeries) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintMetric(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Title) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintMetric(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.Description) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintMetric(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	if m.DataType != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintMetric(data, i, uint64(m.DataType))
	}
	if len(m.TagMeta) > 0 {
		for k, _ := range m.TagMeta {
			data[i] = 0x32
			i++
			v := m.TagMeta[k]
			if v == nil {
				return 0, errors.New("proto: map has nil element")
			}
			msgSize := v.Size()
			mapSize := 1 + len(k) + sovMetric(uint64(len(k))) + 1 + msgSize + sovMetric(uint64(msgSize))
			i = encodeVarintMetric(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMetric(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintMetric(data, i, uint64(v.Size()))
			n1, err := v.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n1
		}
	}
	if m.DedupeStrategy != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintMetric(data, i, uint64(m.DedupeStrategy))
	}
	return i, nil
}

func (m *MetricSeries_MetricTagMeta) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricSeries_MetricTagMeta) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMetric(data, i, uint64(m.Index))
	}
	if len(m.Title) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintMetric(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.Description) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintMetric(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	return i, nil
}

func (m *MetricDatapoint) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricDatapoint) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMetric(data, i, uint64(m.Timestamp))
	}
	if m.Location != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMetric(data, i, uint64(m.Location.Size()))
		n2, err := m.Location.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			data[i] = 0x1a
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovMetric(uint64(len(k))) + 1 + len(v) + sovMetric(uint64(len(v)))
			i = encodeVarintMetric(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMetric(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintMetric(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if m.Value != 0 {
		data[i] = 0x21
		i++
		i = encodeFixed64Metric(data, i, uint64(math.Float64bits(float64(m.Value))))
	}
	return i, nil
}

func (m *MetricDatapointWithMeta) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricDatapointWithMeta) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Datapoint != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMetric(data, i, uint64(m.Datapoint.Size()))
		n3, err := m.Datapoint.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Metric != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMetric(data, i, uint64(m.Metric.Size()))
		n4, err := m.Metric.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *MetricDatapointQuery) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricDatapointQuery) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimeConstraint != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMetric(data, i, uint64(m.TimeConstraint.Size()))
		n5, err := m.TimeConstraint.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.TagConstraint != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMetric(data, i, uint64(m.TagConstraint.Size()))
		n6, err := m.TagConstraint.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *MetricDatapointQuery_MetricDatapointTimeConstraint) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricDatapointQuery_MetricDatapointTimeConstraint) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinTime != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMetric(data, i, uint64(m.MinTime))
	}
	if m.MaxTime != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintMetric(data, i, uint64(m.MaxTime))
	}
	return i, nil
}

func (m *MetricDatapointQuery_MetricDatapointTagConstraint) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricDatapointQuery_MetricDatapointTagConstraint) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			data[i] = 0xa
			i++
			v := m.Tags[k]
			if v == nil {
				return 0, errors.New("proto: map has nil element")
			}
			msgSize := v.Size()
			mapSize := 1 + len(k) + sovMetric(uint64(len(k))) + 1 + msgSize + sovMetric(uint64(msgSize))
			i = encodeVarintMetric(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMetric(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintMetric(data, i, uint64(v.Size()))
			n7, err := v.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n7
		}
	}
	return i, nil
}

func (m *MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, s := range m.Value {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Metric(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Metric(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMetric(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *MetricIdentifier) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	return n
}

func (m *MetricSeries) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovMetric(uint64(m.DataType))
	}
	if len(m.TagMeta) > 0 {
		for k, v := range m.TagMeta {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
			}
			mapEntrySize := 1 + len(k) + sovMetric(uint64(len(k))) + 1 + l + sovMetric(uint64(l))
			n += mapEntrySize + 1 + sovMetric(uint64(mapEntrySize))
		}
	}
	if m.DedupeStrategy != 0 {
		n += 1 + sovMetric(uint64(m.DedupeStrategy))
	}
	return n
}

func (m *MetricSeries_MetricTagMeta) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovMetric(uint64(m.Index))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	return n
}

func (m *MetricDatapoint) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovMetric(uint64(m.Timestamp))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovMetric(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMetric(uint64(len(k))) + 1 + len(v) + sovMetric(uint64(len(v)))
			n += mapEntrySize + 1 + sovMetric(uint64(mapEntrySize))
		}
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *MetricDatapointWithMeta) Size() (n int) {
	var l int
	_ = l
	if m.Datapoint != nil {
		l = m.Datapoint.Size()
		n += 1 + l + sovMetric(uint64(l))
	}
	if m.Metric != nil {
		l = m.Metric.Size()
		n += 1 + l + sovMetric(uint64(l))
	}
	return n
}

func (m *MetricDatapointQuery) Size() (n int) {
	var l int
	_ = l
	if m.TimeConstraint != nil {
		l = m.TimeConstraint.Size()
		n += 1 + l + sovMetric(uint64(l))
	}
	if m.TagConstraint != nil {
		l = m.TagConstraint.Size()
		n += 1 + l + sovMetric(uint64(l))
	}
	return n
}

func (m *MetricDatapointQuery_MetricDatapointTimeConstraint) Size() (n int) {
	var l int
	_ = l
	if m.MinTime != 0 {
		n += 1 + sovMetric(uint64(m.MinTime))
	}
	if m.MaxTime != 0 {
		n += 1 + sovMetric(uint64(m.MaxTime))
	}
	return n
}

func (m *MetricDatapointQuery_MetricDatapointTagConstraint) Size() (n int) {
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
			}
			mapEntrySize := 1 + len(k) + sovMetric(uint64(len(k))) + 1 + l + sovMetric(uint64(l))
			n += mapEntrySize + 1 + sovMetric(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, s := range m.Value {
			l = len(s)
			n += 1 + l + sovMetric(uint64(l))
		}
	}
	return n
}

func sovMetric(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetric(x uint64) (n int) {
	return sovMetric(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetricIdentifier) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricSeries) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DataType |= (MetricSeries_MetricDataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMetric
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapmsglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapmsglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if mapmsglen < 0 {
				return ErrInvalidLengthMetric
			}
			postmsgIndex := iNdEx + mapmsglen
			if mapmsglen < 0 {
				return ErrInvalidLengthMetric
			}
			if postmsgIndex > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := &MetricSeries_MetricTagMeta{}
			if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
				return err
			}
			iNdEx = postmsgIndex
			if m.TagMeta == nil {
				m.TagMeta = make(map[string]*MetricSeries_MetricTagMeta)
			}
			m.TagMeta[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedupeStrategy", wireType)
			}
			m.DedupeStrategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DedupeStrategy |= (MetricSeries_MetricDeduplicationStrategy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricSeries_MetricTagMeta) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricTagMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricTagMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Index |= (MetricSeries_MetricTagMeta_MetricTagIndexType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricDatapoint) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricDatapoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricDatapoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &common.GeoLocation{}
			}
			if err := m.Location.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMetric
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthMetric
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricDatapointWithMeta) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricDatapointWithMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricDatapointWithMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datapoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Datapoint == nil {
				m.Datapoint = &MetricDatapoint{}
			}
			if err := m.Datapoint.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metric == nil {
				m.Metric = &MetricIdentifier{}
			}
			if err := m.Metric.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricDatapointQuery) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricDatapointQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricDatapointQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeConstraint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeConstraint == nil {
				m.TimeConstraint = &MetricDatapointQuery_MetricDatapointTimeConstraint{}
			}
			if err := m.TimeConstraint.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagConstraint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TagConstraint == nil {
				m.TagConstraint = &MetricDatapointQuery_MetricDatapointTagConstraint{}
			}
			if err := m.TagConstraint.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricDatapointQuery_MetricDatapointTimeConstraint) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricDatapointTimeConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricDatapointTimeConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTime", wireType)
			}
			m.MinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MinTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTime", wireType)
			}
			m.MaxTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MaxTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricDatapointQuery_MetricDatapointTagConstraint) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricDatapointTagConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricDatapointTagConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMetric
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapmsglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapmsglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if mapmsglen < 0 {
				return ErrInvalidLengthMetric
			}
			postmsgIndex := iNdEx + mapmsglen
			if mapmsglen < 0 {
				return ErrInvalidLengthMetric
			}
			if postmsgIndex > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := &MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag{}
			if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
				return err
			}
			iNdEx = postmsgIndex
			if m.Tags == nil {
				m.Tags = make(map[string]*MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag)
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricDatapointQuery_MetricDatapointTagConstraint_MetricDatapointTagConstraintTag) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricDatapointTagConstraintTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricDatapointTagConstraintTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetric(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetric
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetric
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetric(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetric = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetric   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorMetric = []byte{
	// 750 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0xc6, 0xf9, 0x23, 0x39, 0x09, 0x21, 0x9a, 0x8b, 0x44, 0xae, 0x2f, 0xf7, 0x5e, 0xea, 0x6e,
	0xd8, 0x34, 0xa1, 0xa9, 0x22, 0x28, 0xea, 0xa2, 0xfc, 0x44, 0x08, 0xb5, 0x84, 0xd6, 0x04, 0x21,
	0x36, 0x4d, 0x9d, 0x78, 0x08, 0x23, 0x12, 0x4f, 0x64, 0x4f, 0x2a, 0xb2, 0xed, 0x23, 0xf4, 0x61,
	0xfa, 0x06, 0x95, 0xba, 0xe4, 0x11, 0xaa, 0x2e, 0xfa, 0x14, 0x5d, 0x74, 0xfe, 0x88, 0x9d, 0x14,
	0x8c, 0xca, 0x22, 0xf2, 0x7c, 0x73, 0x7e, 0xbe, 0x33, 0x67, 0xbe, 0x39, 0x81, 0x7a, 0x8f, 0xb0,
	0x8b, 0x51, 0xa7, 0xd2, 0xa5, 0x83, 0xea, 0xf9, 0x28, 0xc0, 0x3e, 0xed, 0x50, 0x46, 0xba, 0x41,
	0xd5, 0xc7, 0xec, 0x82, 0x78, 0x97, 0x2c, 0xa8, 0x0e, 0x30, 0xf3, 0x49, 0x57, 0x7f, 0x2a, 0x43,
	0x9f, 0x32, 0x8a, 0x32, 0x0a, 0x99, 0x4f, 0x22, 0xe1, 0x3d, 0xda, 0xa3, 0x55, 0x69, 0xee, 0x8c,
	0xce, 0x25, 0x92, 0x40, 0xae, 0x54, 0x98, 0xf9, 0xf4, 0x2e, 0x36, 0xe5, 0xc9, 0xb7, 0x07, 0xd4,
	0xd3, 0x1f, 0x15, 0x62, 0x59, 0x50, 0x3a, 0x94, 0x5c, 0x07, 0x2e, 0xf6, 0x18, 0x39, 0x27, 0xd8,
	0x47, 0x45, 0x48, 0x10, 0xb7, 0x6c, 0xac, 0x1a, 0x6b, 0x39, 0x9b, 0xaf, 0xac, 0xcf, 0x69, 0x28,
	0x28, 0xa7, 0x63, 0xec, 0x13, 0x1c, 0xcc, 0x3a, 0xa0, 0x25, 0x48, 0x33, 0xc2, 0xfa, 0xb8, 0x9c,
	0x90, 0x5b, 0x0a, 0xa0, 0x55, 0xc8, 0xbb, 0x38, 0xe8, 0xfa, 0x64, 0xc8, 0x08, 0xf5, 0xca, 0x49,
	0x69, 0x8b, 0x6e, 0xa1, 0x97, 0x90, 0x73, 0x1d, 0xe6, 0xb4, 0xd9, 0x78, 0x88, 0xcb, 0x69, 0x6e,
	0x2f, 0xd6, 0x1e, 0x57, 0x74, 0x23, 0xa2, 0x84, 0x1a, 0xec, 0x71, 0xdf, 0x16, 0x77, 0xb5, 0xb3,
	0xae, 0x5e, 0xa1, 0x17, 0x90, 0x65, 0x4e, 0xaf, 0xcd, 0x63, 0x9c, 0x72, 0x66, 0x35, 0xb9, 0x96,
	0xaf, 0x3d, 0xba, 0x35, 0x41, 0xcb, 0xe9, 0x71, 0xec, 0x34, 0x3c, 0xe6, 0x8f, 0xed, 0x79, 0xa6,
	0x10, 0x3a, 0x83, 0x45, 0x17, 0xbb, 0xa3, 0x21, 0x6e, 0x07, 0xcc, 0x77, 0x18, 0xee, 0x8d, 0xcb,
	0xf3, 0xb2, 0x8a, 0xf5, 0xb8, 0x2a, 0x44, 0x44, 0x9f, 0x74, 0x1d, 0x71, 0x84, 0x63, 0x1d, 0x67,
	0x17, 0x55, 0xa2, 0x1b, 0x6c, 0xbe, 0x83, 0x42, 0x94, 0x13, 0x95, 0x20, 0x79, 0x89, 0xc7, 0xba,
	0x67, 0x62, 0x89, 0x36, 0x21, 0xfd, 0xc1, 0xe9, 0x8f, 0x54, 0xd3, 0xf2, 0x35, 0x2b, 0x86, 0x52,
	0x67, 0xb2, 0x55, 0xc0, 0x56, 0x62, 0xd3, 0x30, 0xaf, 0x0d, 0x58, 0x98, 0x32, 0xa2, 0x57, 0x90,
	0x26, 0x9e, 0x8b, 0xaf, 0x24, 0x47, 0xb1, 0x56, 0xbf, 0x3f, 0x5f, 0x88, 0x0e, 0x44, 0xa0, 0x6c,
	0xad, 0xca, 0xf1, 0xd0, 0x1b, 0xb5, 0xb6, 0x00, 0xfd, 0x9e, 0x14, 0x65, 0x21, 0xd5, 0x3c, 0x6a,
	0x36, 0x4a, 0x73, 0xa8, 0x00, 0xd9, 0xe3, 0xd6, 0x76, 0x73, 0x6f, 0xdb, 0xde, 0x2b, 0x19, 0x02,
	0xed, 0x37, 0x8e, 0xde, 0x1c, 0x1d, 0x34, 0x5b, 0xa5, 0x84, 0xb5, 0x02, 0xc5, 0xe9, 0x7b, 0x46,
	0x00, 0x99, 0xe6, 0xc9, 0xe1, 0x4e, 0xc3, 0x2e, 0xcd, 0x59, 0x35, 0xf8, 0x27, 0xa6, 0xff, 0x11,
	0x8a, 0x1c, 0xa4, 0xf9, 0x6a, 0xb7, 0x51, 0x32, 0xac, 0x1f, 0x06, 0x2c, 0x86, 0x29, 0x87, 0x94,
	0x78, 0x0c, 0xad, 0x40, 0x8e, 0x91, 0x01, 0x0e, 0x98, 0x33, 0x18, 0xca, 0x56, 0x25, 0xed, 0x70,
	0x03, 0x55, 0x21, 0xdb, 0xa7, 0x2a, 0xb5, 0xbe, 0x97, 0xbf, 0x2a, 0xfa, 0xbd, 0xec, 0x63, 0xfa,
	0x5a, 0x9b, 0xec, 0x89, 0x13, 0xaa, 0x43, 0x8a, 0xab, 0x29, 0xe0, 0xbd, 0xb8, 0x45, 0x7c, 0x13,
	0x56, 0xa1, 0xbf, 0x40, 0x89, 0x4f, 0xba, 0x8b, 0xfe, 0xaa, 0xcb, 0x4f, 0x71, 0x12, 0x43, 0x5f,
	0xac, 0xb9, 0x01, 0xb9, 0x89, 0xe3, 0x2d, 0x8a, 0x59, 0x8a, 0x2a, 0x26, 0x17, 0x51, 0x83, 0xf5,
	0xd1, 0x80, 0xe5, 0x19, 0xca, 0x53, 0x3e, 0x0a, 0xa4, 0x2e, 0xea, 0xea, 0x91, 0xc9, 0x4d, 0x99,
	0x2d, 0x5f, 0x5b, 0xbe, 0xa3, 0x4c, 0x3b, 0xf4, 0x44, 0xeb, 0xa0, 0x87, 0x90, 0xee, 0x43, 0x79,
	0x3a, 0x26, 0x1c, 0x17, 0xb6, 0xf6, 0xb3, 0x7e, 0xa6, 0x60, 0x69, 0x26, 0xe1, 0xdb, 0x11, 0xe6,
	0x27, 0xe9, 0xc2, 0xa2, 0xe8, 0x70, 0xbb, 0x4b, 0x3d, 0xf1, 0xce, 0xc2, 0x3a, 0xb6, 0xee, 0xa8,
	0x43, 0x86, 0xcd, 0x6e, 0xb6, 0x78, 0x8a, 0xdd, 0x49, 0x06, 0xbb, 0xc8, 0xa6, 0x30, 0x7a, 0x0f,
	0x45, 0x31, 0x09, 0x22, 0x1c, 0xaa, 0xee, 0xe7, 0x7f, 0xc4, 0xe1, 0xf4, 0x22, 0x14, 0x0b, 0x2c,
	0x0a, 0xcd, 0x13, 0xf8, 0x37, 0xb6, 0x24, 0xf4, 0x37, 0x64, 0x07, 0xc4, 0x6b, 0x8b, 0xc2, 0xb4,
	0xb2, 0xe6, 0x39, 0x16, 0x4e, 0xd2, 0xe4, 0x5c, 0x29, 0x53, 0x42, 0x9b, 0x9c, 0x2b, 0x61, 0x32,
	0xbf, 0x24, 0x60, 0x25, 0xae, 0x0c, 0x74, 0xaa, 0x25, 0x66, 0x48, 0x89, 0xed, 0x3e, 0xf8, 0x3c,
	0xb3, 0x22, 0x34, 0x3f, 0x19, 0xf1, 0x7a, 0xa3, 0xd3, 0x13, 0xea, 0xec, 0xe1, 0xcc, 0x71, 0x46,
	0x0e, 0xa2, 0x83, 0x6d, 0x03, 0xfe, 0xbf, 0xc7, 0x3b, 0x7c, 0x07, 0xa2, 0x23, 0x37, 0xef, 0x60,
	0xa7, 0xf0, 0xf5, 0xfb, 0x7f, 0xc6, 0x35, 0xff, 0x7d, 0xe3, 0xbf, 0x4e, 0x46, 0xfe, 0xbd, 0x3d,
	0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0x54, 0x37, 0xf4, 0xbe, 0x81, 0x07, 0x00, 0x00,
}
