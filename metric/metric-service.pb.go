// Code generated by protoc-gen-go.
// source: github.com/paralin/rethinkts/metric/metric-service.proto
// DO NOT EDIT!

/*
Package metric is a generated protocol buffer package.

It is generated from these files:
	github.com/paralin/rethinkts/metric/metric-service.proto

It has these top-level messages:
	RequestContext
	RecordDatapointRequest
	RecordDatapointResponse
	ListDatapointRequest
	ListDatapointResponse
	ListMetricRequest
	ListMetricResponse
	CreateMetricRequest
	CreateMetricResponse
	GetMetricRequest
	GetMetricResponse
*/
package metric

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListDatapointResponse_ListDatapointResponseType int32

const (
	ListDatapointResponse_LIST_DATAPOINT_SERIES_DETAILS ListDatapointResponse_ListDatapointResponseType = 0
	// Tailing: datapoint added / changed
	ListDatapointResponse_LIST_DATAPOINT_ADD ListDatapointResponse_ListDatapointResponseType = 1
	// Tailing: datapoint removed
	ListDatapointResponse_LIST_DATAPOINT_DEL ListDatapointResponse_ListDatapointResponseType = 2
	// Tailing: point updated
	ListDatapointResponse_LIST_DATAPOINT_REPLACE ListDatapointResponse_ListDatapointResponseType = 3
	// Tailing: initial set complete
	ListDatapointResponse_LIST_DATAPOINT_INITIAL_SET_COMPLETE ListDatapointResponse_ListDatapointResponseType = 4
)

var ListDatapointResponse_ListDatapointResponseType_name = map[int32]string{
	0: "LIST_DATAPOINT_SERIES_DETAILS",
	1: "LIST_DATAPOINT_ADD",
	2: "LIST_DATAPOINT_DEL",
	3: "LIST_DATAPOINT_REPLACE",
	4: "LIST_DATAPOINT_INITIAL_SET_COMPLETE",
}
var ListDatapointResponse_ListDatapointResponseType_value = map[string]int32{
	"LIST_DATAPOINT_SERIES_DETAILS":       0,
	"LIST_DATAPOINT_ADD":                  1,
	"LIST_DATAPOINT_DEL":                  2,
	"LIST_DATAPOINT_REPLACE":              3,
	"LIST_DATAPOINT_INITIAL_SET_COMPLETE": 4,
}

func (x ListDatapointResponse_ListDatapointResponseType) String() string {
	return proto.EnumName(ListDatapointResponse_ListDatapointResponseType_name, int32(x))
}
func (ListDatapointResponse_ListDatapointResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

type RequestContext struct {
	Identifier *MetricIdentifier `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *RequestContext) Reset()                    { *m = RequestContext{} }
func (m *RequestContext) String() string            { return proto.CompactTextString(m) }
func (*RequestContext) ProtoMessage()               {}
func (*RequestContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestContext) GetIdentifier() *MetricIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

type RecordDatapointRequest struct {
	Context   *RequestContext  `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Datapoint *MetricDatapoint `protobuf:"bytes,2,opt,name=datapoint" json:"datapoint,omitempty"`
}

func (m *RecordDatapointRequest) Reset()                    { *m = RecordDatapointRequest{} }
func (m *RecordDatapointRequest) String() string            { return proto.CompactTextString(m) }
func (*RecordDatapointRequest) ProtoMessage()               {}
func (*RecordDatapointRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RecordDatapointRequest) GetContext() *RequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RecordDatapointRequest) GetDatapoint() *MetricDatapoint {
	if m != nil {
		return m.Datapoint
	}
	return nil
}

type RecordDatapointResponse struct {
	// How many were recorded in this session?
	NumRecorded int32 `protobuf:"varint,1,opt,name=num_recorded,json=numRecorded" json:"num_recorded,omitempty"`
	// How many were rejected (invalid, duplicate)?
	Rejected []*MetricDatapoint `protobuf:"bytes,2,rep,name=rejected" json:"rejected,omitempty"`
}

func (m *RecordDatapointResponse) Reset()                    { *m = RecordDatapointResponse{} }
func (m *RecordDatapointResponse) String() string            { return proto.CompactTextString(m) }
func (*RecordDatapointResponse) ProtoMessage()               {}
func (*RecordDatapointResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RecordDatapointResponse) GetNumRecorded() int32 {
	if m != nil {
		return m.NumRecorded
	}
	return 0
}

func (m *RecordDatapointResponse) GetRejected() []*MetricDatapoint {
	if m != nil {
		return m.Rejected
	}
	return nil
}

type ListDatapointRequest struct {
	Tail           bool                  `protobuf:"varint,1,opt,name=tail" json:"tail,omitempty"`
	Query          *MetricDatapointQuery `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	Context        *RequestContext       `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
	IncludeInitial bool                  `protobuf:"varint,4,opt,name=include_initial,json=includeInitial" json:"include_initial,omitempty"`
}

func (m *ListDatapointRequest) Reset()                    { *m = ListDatapointRequest{} }
func (m *ListDatapointRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDatapointRequest) ProtoMessage()               {}
func (*ListDatapointRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListDatapointRequest) GetTail() bool {
	if m != nil {
		return m.Tail
	}
	return false
}

func (m *ListDatapointRequest) GetQuery() *MetricDatapointQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListDatapointRequest) GetContext() *RequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *ListDatapointRequest) GetIncludeInitial() bool {
	if m != nil {
		return m.IncludeInitial
	}
	return false
}

type ListDatapointResponse struct {
	ResponseType ListDatapointResponse_ListDatapointResponseType `protobuf:"varint,1,opt,name=response_type,json=responseType,enum=metric.ListDatapointResponse_ListDatapointResponseType" json:"response_type,omitempty"`
	// Null for first message in the response
	Datapoint *MetricDatapoint `protobuf:"bytes,2,opt,name=datapoint" json:"datapoint,omitempty"`
	// Only sent once, subsequent messages will be null on this field
	Series *MetricSeries `protobuf:"bytes,3,opt,name=series" json:"series,omitempty"`
	// If in initial set of data, true
	InitialSet bool `protobuf:"varint,4,opt,name=initial_set,json=initialSet" json:"initial_set,omitempty"`
}

func (m *ListDatapointResponse) Reset()                    { *m = ListDatapointResponse{} }
func (m *ListDatapointResponse) String() string            { return proto.CompactTextString(m) }
func (*ListDatapointResponse) ProtoMessage()               {}
func (*ListDatapointResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListDatapointResponse) GetResponseType() ListDatapointResponse_ListDatapointResponseType {
	if m != nil {
		return m.ResponseType
	}
	return ListDatapointResponse_LIST_DATAPOINT_SERIES_DETAILS
}

func (m *ListDatapointResponse) GetDatapoint() *MetricDatapoint {
	if m != nil {
		return m.Datapoint
	}
	return nil
}

func (m *ListDatapointResponse) GetSeries() *MetricSeries {
	if m != nil {
		return m.Series
	}
	return nil
}

func (m *ListDatapointResponse) GetInitialSet() bool {
	if m != nil {
		return m.InitialSet
	}
	return false
}

type ListMetricRequest struct {
}

func (m *ListMetricRequest) Reset()                    { *m = ListMetricRequest{} }
func (m *ListMetricRequest) String() string            { return proto.CompactTextString(m) }
func (*ListMetricRequest) ProtoMessage()               {}
func (*ListMetricRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ListMetricResponse struct {
	Metric []*MetricSeries `protobuf:"bytes,1,rep,name=metric" json:"metric,omitempty"`
}

func (m *ListMetricResponse) Reset()                    { *m = ListMetricResponse{} }
func (m *ListMetricResponse) String() string            { return proto.CompactTextString(m) }
func (*ListMetricResponse) ProtoMessage()               {}
func (*ListMetricResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListMetricResponse) GetMetric() []*MetricSeries {
	if m != nil {
		return m.Metric
	}
	return nil
}

type CreateMetricRequest struct {
	Metric *MetricSeries `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
}

func (m *CreateMetricRequest) Reset()                    { *m = CreateMetricRequest{} }
func (m *CreateMetricRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateMetricRequest) ProtoMessage()               {}
func (*CreateMetricRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateMetricRequest) GetMetric() *MetricSeries {
	if m != nil {
		return m.Metric
	}
	return nil
}

type CreateMetricResponse struct {
	Metric *MetricSeries `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
}

func (m *CreateMetricResponse) Reset()                    { *m = CreateMetricResponse{} }
func (m *CreateMetricResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateMetricResponse) ProtoMessage()               {}
func (*CreateMetricResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateMetricResponse) GetMetric() *MetricSeries {
	if m != nil {
		return m.Metric
	}
	return nil
}

type GetMetricRequest struct {
	Context *RequestContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
}

func (m *GetMetricRequest) Reset()                    { *m = GetMetricRequest{} }
func (m *GetMetricRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMetricRequest) ProtoMessage()               {}
func (*GetMetricRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetMetricRequest) GetContext() *RequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

type GetMetricResponse struct {
	Metric *MetricSeries `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
}

func (m *GetMetricResponse) Reset()                    { *m = GetMetricResponse{} }
func (m *GetMetricResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMetricResponse) ProtoMessage()               {}
func (*GetMetricResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetMetricResponse) GetMetric() *MetricSeries {
	if m != nil {
		return m.Metric
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestContext)(nil), "metric.RequestContext")
	proto.RegisterType((*RecordDatapointRequest)(nil), "metric.RecordDatapointRequest")
	proto.RegisterType((*RecordDatapointResponse)(nil), "metric.RecordDatapointResponse")
	proto.RegisterType((*ListDatapointRequest)(nil), "metric.ListDatapointRequest")
	proto.RegisterType((*ListDatapointResponse)(nil), "metric.ListDatapointResponse")
	proto.RegisterType((*ListMetricRequest)(nil), "metric.ListMetricRequest")
	proto.RegisterType((*ListMetricResponse)(nil), "metric.ListMetricResponse")
	proto.RegisterType((*CreateMetricRequest)(nil), "metric.CreateMetricRequest")
	proto.RegisterType((*CreateMetricResponse)(nil), "metric.CreateMetricResponse")
	proto.RegisterType((*GetMetricRequest)(nil), "metric.GetMetricRequest")
	proto.RegisterType((*GetMetricResponse)(nil), "metric.GetMetricResponse")
	proto.RegisterEnum("metric.ListDatapointResponse_ListDatapointResponseType", ListDatapointResponse_ListDatapointResponseType_name, ListDatapointResponse_ListDatapointResponseType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MetricService service

type MetricServiceClient interface {
	// Record datapoint calls
	RecordDatapoint(ctx context.Context, in *RecordDatapointRequest, opts ...grpc.CallOption) (*RecordDatapointResponse, error)
	RecordDatapointStream(ctx context.Context, opts ...grpc.CallOption) (MetricService_RecordDatapointStreamClient, error)
	// List datapoint calls
	ListDatapoint(ctx context.Context, in *ListDatapointRequest, opts ...grpc.CallOption) (MetricService_ListDatapointClient, error)
	// List metrics calls
	ListMetric(ctx context.Context, in *ListMetricRequest, opts ...grpc.CallOption) (*ListMetricResponse, error)
	CreateMetric(ctx context.Context, in *CreateMetricRequest, opts ...grpc.CallOption) (*CreateMetricResponse, error)
	GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error)
}

type metricServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetricServiceClient(cc *grpc.ClientConn) MetricServiceClient {
	return &metricServiceClient{cc}
}

func (c *metricServiceClient) RecordDatapoint(ctx context.Context, in *RecordDatapointRequest, opts ...grpc.CallOption) (*RecordDatapointResponse, error) {
	out := new(RecordDatapointResponse)
	err := grpc.Invoke(ctx, "/metric.MetricService/RecordDatapoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) RecordDatapointStream(ctx context.Context, opts ...grpc.CallOption) (MetricService_RecordDatapointStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MetricService_serviceDesc.Streams[0], c.cc, "/metric.MetricService/RecordDatapointStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricServiceRecordDatapointStreamClient{stream}
	return x, nil
}

type MetricService_RecordDatapointStreamClient interface {
	Send(*RecordDatapointRequest) error
	CloseAndRecv() (*RecordDatapointResponse, error)
	grpc.ClientStream
}

type metricServiceRecordDatapointStreamClient struct {
	grpc.ClientStream
}

func (x *metricServiceRecordDatapointStreamClient) Send(m *RecordDatapointRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricServiceRecordDatapointStreamClient) CloseAndRecv() (*RecordDatapointResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RecordDatapointResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricServiceClient) ListDatapoint(ctx context.Context, in *ListDatapointRequest, opts ...grpc.CallOption) (MetricService_ListDatapointClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MetricService_serviceDesc.Streams[1], c.cc, "/metric.MetricService/ListDatapoint", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricServiceListDatapointClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetricService_ListDatapointClient interface {
	Recv() (*ListDatapointResponse, error)
	grpc.ClientStream
}

type metricServiceListDatapointClient struct {
	grpc.ClientStream
}

func (x *metricServiceListDatapointClient) Recv() (*ListDatapointResponse, error) {
	m := new(ListDatapointResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricServiceClient) ListMetric(ctx context.Context, in *ListMetricRequest, opts ...grpc.CallOption) (*ListMetricResponse, error) {
	out := new(ListMetricResponse)
	err := grpc.Invoke(ctx, "/metric.MetricService/ListMetric", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetric(ctx context.Context, in *CreateMetricRequest, opts ...grpc.CallOption) (*CreateMetricResponse, error) {
	out := new(CreateMetricResponse)
	err := grpc.Invoke(ctx, "/metric.MetricService/CreateMetric", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error) {
	out := new(GetMetricResponse)
	err := grpc.Invoke(ctx, "/metric.MetricService/GetMetric", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetricService service

type MetricServiceServer interface {
	// Record datapoint calls
	RecordDatapoint(context.Context, *RecordDatapointRequest) (*RecordDatapointResponse, error)
	RecordDatapointStream(MetricService_RecordDatapointStreamServer) error
	// List datapoint calls
	ListDatapoint(*ListDatapointRequest, MetricService_ListDatapointServer) error
	// List metrics calls
	ListMetric(context.Context, *ListMetricRequest) (*ListMetricResponse, error)
	CreateMetric(context.Context, *CreateMetricRequest) (*CreateMetricResponse, error)
	GetMetric(context.Context, *GetMetricRequest) (*GetMetricResponse, error)
}

func RegisterMetricServiceServer(s *grpc.Server, srv MetricServiceServer) {
	s.RegisterService(&_MetricService_serviceDesc, srv)
}

func _MetricService_RecordDatapoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDatapointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).RecordDatapoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metric.MetricService/RecordDatapoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).RecordDatapoint(ctx, req.(*RecordDatapointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_RecordDatapointStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricServiceServer).RecordDatapointStream(&metricServiceRecordDatapointStreamServer{stream})
}

type MetricService_RecordDatapointStreamServer interface {
	SendAndClose(*RecordDatapointResponse) error
	Recv() (*RecordDatapointRequest, error)
	grpc.ServerStream
}

type metricServiceRecordDatapointStreamServer struct {
	grpc.ServerStream
}

func (x *metricServiceRecordDatapointStreamServer) SendAndClose(m *RecordDatapointResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricServiceRecordDatapointStreamServer) Recv() (*RecordDatapointRequest, error) {
	m := new(RecordDatapointRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetricService_ListDatapoint_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDatapointRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricServiceServer).ListDatapoint(m, &metricServiceListDatapointServer{stream})
}

type MetricService_ListDatapointServer interface {
	Send(*ListDatapointResponse) error
	grpc.ServerStream
}

type metricServiceListDatapointServer struct {
	grpc.ServerStream
}

func (x *metricServiceListDatapointServer) Send(m *ListDatapointResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MetricService_ListMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).ListMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metric.MetricService/ListMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).ListMetric(ctx, req.(*ListMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metric.MetricService/CreateMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetric(ctx, req.(*CreateMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metric.MetricService/GetMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).GetMetric(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metric.MetricService",
	HandlerType: (*MetricServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordDatapoint",
			Handler:    _MetricService_RecordDatapoint_Handler,
		},
		{
			MethodName: "ListMetric",
			Handler:    _MetricService_ListMetric_Handler,
		},
		{
			MethodName: "CreateMetric",
			Handler:    _MetricService_CreateMetric_Handler,
		},
		{
			MethodName: "GetMetric",
			Handler:    _MetricService_GetMetric_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordDatapointStream",
			Handler:       _MetricService_RecordDatapointStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListDatapoint",
			Handler:       _MetricService_ListDatapoint_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/paralin/rethinkts/metric/metric-service.proto",
}

func init() {
	proto.RegisterFile("github.com/paralin/rethinkts/metric/metric-service.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0xdd, 0x4e, 0xdb, 0x58,
	0x10, 0x5e, 0x27, 0xc0, 0xc2, 0x10, 0x20, 0x0c, 0x21, 0x04, 0x6f, 0x58, 0xc0, 0xbb, 0x12, 0x68,
	0xc5, 0x26, 0x34, 0xb4, 0x2a, 0xe5, 0xa6, 0x4a, 0x13, 0xab, 0x72, 0x15, 0x7e, 0x6a, 0x5b, 0xaa,
	0x54, 0x55, 0xb2, 0x4c, 0x72, 0x0a, 0xa7, 0x4d, 0xec, 0x60, 0x9f, 0xa0, 0xa2, 0xaa, 0x17, 0xad,
	0xfa, 0x06, 0x3c, 0x49, 0x55, 0xa9, 0x52, 0x9f, 0xa3, 0xaf, 0xd0, 0x07, 0xa9, 0x38, 0x3e, 0x49,
	0xec, 0xe0, 0xf0, 0xd7, 0x2b, 0xdb, 0xdf, 0xcc, 0x7c, 0xf3, 0xcd, 0x78, 0xce, 0x1c, 0xd8, 0x3e,
	0xa2, 0xec, 0xb8, 0x73, 0x58, 0xa8, 0xbb, 0xad, 0x62, 0xdb, 0xf6, 0xec, 0x26, 0x75, 0x8a, 0x1e,
	0x61, 0xc7, 0xd4, 0x79, 0xcb, 0xfc, 0x62, 0x8b, 0x30, 0x8f, 0xd6, 0xc5, 0xe3, 0x7f, 0x9f, 0x78,
	0xa7, 0xb4, 0x4e, 0x0a, 0x6d, 0xcf, 0x65, 0x2e, 0x8e, 0x05, 0xa8, 0x9c, 0x3f, 0x72, 0xdd, 0xa3,
	0x26, 0x29, 0xda, 0x6d, 0x5a, 0xb4, 0x1d, 0xc7, 0x65, 0x36, 0xa3, 0xae, 0xe3, 0x07, 0x5e, 0xf2,
	0xe6, 0xcd, 0xf9, 0x83, 0x08, 0xe5, 0x19, 0x4c, 0xeb, 0xe4, 0xa4, 0x43, 0x7c, 0x56, 0x71, 0x1d,
	0x46, 0xde, 0x31, 0xdc, 0x06, 0xa0, 0x0d, 0xe2, 0x30, 0xfa, 0x9a, 0x12, 0x2f, 0x27, 0xad, 0x48,
	0xeb, 0x93, 0xa5, 0x5c, 0x41, 0x04, 0xed, 0xf2, 0x87, 0xd6, 0xb3, 0xeb, 0x21, 0x5f, 0xe5, 0xa3,
	0x04, 0x59, 0x9d, 0xd4, 0x5d, 0xaf, 0x51, 0xb5, 0x99, 0xdd, 0x76, 0xa9, 0xc3, 0x04, 0x37, 0x6e,
	0xc2, 0x9f, 0xf5, 0x80, 0x5f, 0x30, 0x66, 0xbb, 0x8c, 0xd1, 0xec, 0x7a, 0xd7, 0x0d, 0x1f, 0xc0,
	0x44, 0xa3, 0xcb, 0x92, 0x4b, 0xf0, 0x98, 0x85, 0xa8, 0x8a, 0x7e, 0x92, 0xbe, 0xa7, 0x72, 0x02,
	0x0b, 0x97, 0x24, 0xf8, 0x6d, 0xd7, 0xf1, 0x09, 0xae, 0x42, 0xca, 0xe9, 0xb4, 0x2c, 0x8f, 0x9b,
	0x49, 0x83, 0x0b, 0x19, 0xd5, 0x27, 0x9d, 0x4e, 0x4b, 0x17, 0x10, 0x6e, 0xc1, 0xb8, 0x47, 0xde,
	0x90, 0x3a, 0x23, 0x8d, 0x5c, 0x62, 0x25, 0x79, 0x55, 0xce, 0x9e, 0xa3, 0xf2, 0x5d, 0x82, 0x4c,
	0x8d, 0xfa, 0xec, 0x52, 0xd1, 0x08, 0x23, 0xcc, 0xa6, 0x4d, 0x9e, 0x68, 0x5c, 0xe7, 0xef, 0x58,
	0x82, 0xd1, 0x93, 0x0e, 0xf1, 0xce, 0x44, 0x49, 0xf9, 0x21, 0xf4, 0xcf, 0x2f, 0x7c, 0xf4, 0xc0,
	0x35, 0xdc, 0xbc, 0xe4, 0xcd, 0x9a, 0xb7, 0x06, 0x33, 0xd4, 0xa9, 0x37, 0x3b, 0x0d, 0x62, 0x51,
	0x87, 0x32, 0x6a, 0x37, 0x73, 0x23, 0x5c, 0xc4, 0xb4, 0x80, 0xb5, 0x00, 0x55, 0xbe, 0x24, 0x61,
	0x7e, 0x40, 0xbb, 0xe8, 0xd6, 0x2b, 0x98, 0xf2, 0xc4, 0xbb, 0xc5, 0xce, 0xda, 0x84, 0x57, 0x31,
	0x5d, 0x7a, 0xd8, 0x4d, 0x1d, 0x1b, 0x15, 0x8f, 0x9a, 0x67, 0x6d, 0xa2, 0xa7, 0xbc, 0xd0, 0xd7,
	0x1d, 0xff, 0x2e, 0x6e, 0xc0, 0x98, 0x4f, 0x3c, 0x4a, 0x7c, 0xd1, 0x88, 0x4c, 0x34, 0xc6, 0xe0,
	0x36, 0x5d, 0xf8, 0xe0, 0x32, 0x4c, 0x8a, 0xea, 0x2d, 0x9f, 0x30, 0xd1, 0x01, 0x10, 0x90, 0x41,
	0x98, 0xf2, 0x55, 0x82, 0xc5, 0xa1, 0x8a, 0x71, 0x15, 0x96, 0x6a, 0x9a, 0x61, 0x5a, 0xd5, 0xb2,
	0x59, 0x3e, 0xd8, 0xd7, 0xf6, 0x4c, 0xcb, 0x50, 0x75, 0x4d, 0x35, 0xac, 0xaa, 0x6a, 0x96, 0xb5,
	0x9a, 0x91, 0xfe, 0x03, 0xb3, 0x80, 0x03, 0x2e, 0xe5, 0x6a, 0x35, 0x2d, 0xc5, 0xe0, 0x55, 0xb5,
	0x96, 0x4e, 0xa0, 0x0c, 0xd9, 0x01, 0x5c, 0x57, 0x0f, 0x6a, 0xe5, 0x8a, 0x9a, 0x4e, 0xe2, 0x1a,
	0xfc, 0x33, 0x60, 0xd3, 0xf6, 0x34, 0x53, 0x2b, 0xd7, 0x2c, 0x43, 0x35, 0xad, 0xca, 0xfe, 0xee,
	0x41, 0x4d, 0x35, 0xd5, 0xf4, 0x88, 0x32, 0x07, 0xb3, 0x17, 0xa2, 0x83, 0x92, 0xc5, 0x04, 0x28,
	0x4f, 0x00, 0xc3, 0xa0, 0xf8, 0x89, 0x1b, 0x20, 0xf6, 0x46, 0x4e, 0xe2, 0xd3, 0x3c, 0xa4, 0x5f,
	0x01, 0xa8, 0x54, 0x60, 0xae, 0xe2, 0x11, 0x9b, 0x91, 0x08, 0x75, 0x84, 0x44, 0xba, 0x96, 0xa4,
	0x0a, 0x99, 0x28, 0x49, 0x8c, 0x94, 0x9b, 0xb0, 0xa4, 0x9f, 0x92, 0x68, 0x89, 0xb7, 0xdf, 0x21,
	0x4a, 0x19, 0x66, 0x43, 0x2c, 0x77, 0x11, 0x52, 0xfa, 0x36, 0x0a, 0x53, 0x3d, 0xc3, 0xc5, 0x3e,
	0xc6, 0x73, 0x09, 0x66, 0x06, 0x56, 0x0c, 0xfe, 0xdd, 0x57, 0x12, 0xb7, 0xfe, 0xe4, 0xe5, 0xa1,
	0xf6, 0x40, 0x94, 0xf2, 0xf8, 0xd3, 0x8f, 0x9f, 0xe7, 0x89, 0x47, 0xca, 0x46, 0xf1, 0xf4, 0x5e,
	0x77, 0x4f, 0xbf, 0x17, 0x65, 0x14, 0xfa, 0x2b, 0xb6, 0x40, 0x1b, 0x1f, 0x8a, 0xbd, 0xe3, 0xb0,
	0x13, 0x3a, 0x19, 0x2f, 0x61, 0x7e, 0x80, 0xdb, 0x60, 0x1e, 0xb1, 0x5b, 0xbf, 0x2d, 0x6d, 0x5d,
	0xc2, 0xcf, 0x12, 0x4c, 0x45, 0x8e, 0x09, 0xe6, 0x87, 0x6c, 0x81, 0x80, 0x72, 0xe9, 0xca, 0x1d,
	0xa1, 0xdc, 0xe7, 0xb5, 0x16, 0xf0, 0x56, 0xb5, 0x6e, 0x4a, 0xf8, 0x02, 0xa0, 0x3f, 0xe2, 0xb8,
	0x18, 0x4e, 0x12, 0x19, 0x14, 0x59, 0x8e, 0x33, 0x89, 0xe4, 0xc8, 0x93, 0xa7, 0x10, 0xfa, 0xc9,
	0x91, 0x40, 0x2a, 0x3c, 0xb2, 0xf8, 0x57, 0x37, 0x3e, 0xe6, 0x34, 0xc8, 0xf9, 0x78, 0xa3, 0xa0,
	0x97, 0x39, 0x7d, 0x46, 0x09, 0xd1, 0xef, 0x88, 0x51, 0xc2, 0x26, 0x4c, 0xf4, 0xa6, 0x11, 0x7b,
	0x37, 0xea, 0xe0, 0x98, 0xcb, 0x8b, 0x31, 0x16, 0xc1, 0xfe, 0x1f, 0x67, 0xff, 0x17, 0x95, 0xeb,
	0x3b, 0x77, 0x38, 0xc6, 0xef, 0xf7, 0xad, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x6e, 0x93,
	0x36, 0x73, 0x08, 0x00, 0x00,
}
