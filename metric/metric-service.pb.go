// Code generated by protoc-gen-gogo.
// source: github.com/fuserobotics/rethinkts/metric/metric-service.proto
// DO NOT EDIT!

/*
	Package metric is a generated protocol buffer package.

	It is generated from these files:
		github.com/fuserobotics/rethinkts/metric/metric-service.proto
		github.com/fuserobotics/rethinkts/metric/metric.proto

	It has these top-level messages:
		RequestContext
		RecordDatapointRequest
		RecordDatapointResponse
		ListDatapointRequest
		ListDatapointResponse
		MetricIdentifier
		MetricSeries
		MetricDatapoint
		MetricDatapointWithMeta
		MetricDatapointQuery
*/
package metric

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type ListDatapointResponse_ListDatapointResponseType int32

const (
	ListDatapointResponse_LIST_DATAPOINT_SERIES_DETAILS ListDatapointResponse_ListDatapointResponseType = 0
	// Tailing: datapoint added / changed
	ListDatapointResponse_LIST_DATAPOINT_ADD ListDatapointResponse_ListDatapointResponseType = 1
	// Tailing: datapoint removed
	ListDatapointResponse_LIST_DATAPOINT_DEL ListDatapointResponse_ListDatapointResponseType = 2
	// Tailing: point updated
	ListDatapointResponse_LIST_DATAPOINT_REPLACE ListDatapointResponse_ListDatapointResponseType = 3
)

var ListDatapointResponse_ListDatapointResponseType_name = map[int32]string{
	0: "LIST_DATAPOINT_SERIES_DETAILS",
	1: "LIST_DATAPOINT_ADD",
	2: "LIST_DATAPOINT_DEL",
	3: "LIST_DATAPOINT_REPLACE",
}
var ListDatapointResponse_ListDatapointResponseType_value = map[string]int32{
	"LIST_DATAPOINT_SERIES_DETAILS": 0,
	"LIST_DATAPOINT_ADD":            1,
	"LIST_DATAPOINT_DEL":            2,
	"LIST_DATAPOINT_REPLACE":        3,
}

func (x ListDatapointResponse_ListDatapointResponseType) String() string {
	return proto.EnumName(ListDatapointResponse_ListDatapointResponseType_name, int32(x))
}
func (ListDatapointResponse_ListDatapointResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMetricService, []int{4, 0}
}

type RequestContext struct {
	Identifier *MetricIdentifier `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *RequestContext) Reset()                    { *m = RequestContext{} }
func (m *RequestContext) String() string            { return proto.CompactTextString(m) }
func (*RequestContext) ProtoMessage()               {}
func (*RequestContext) Descriptor() ([]byte, []int) { return fileDescriptorMetricService, []int{0} }

func (m *RequestContext) GetIdentifier() *MetricIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

type RecordDatapointRequest struct {
	Context   *RequestContext  `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Datapoint *MetricDatapoint `protobuf:"bytes,2,opt,name=datapoint" json:"datapoint,omitempty"`
}

func (m *RecordDatapointRequest) Reset()         { *m = RecordDatapointRequest{} }
func (m *RecordDatapointRequest) String() string { return proto.CompactTextString(m) }
func (*RecordDatapointRequest) ProtoMessage()    {}
func (*RecordDatapointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMetricService, []int{1}
}

func (m *RecordDatapointRequest) GetContext() *RequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RecordDatapointRequest) GetDatapoint() *MetricDatapoint {
	if m != nil {
		return m.Datapoint
	}
	return nil
}

type RecordDatapointResponse struct {
	// How many were recorded in this session?
	NumRecorded int32 `protobuf:"varint,1,opt,name=num_recorded,json=numRecorded,proto3" json:"num_recorded,omitempty"`
	// How many were rejected (invalid, duplicate)?
	Rejected []*MetricDatapoint `protobuf:"bytes,2,rep,name=rejected" json:"rejected,omitempty"`
}

func (m *RecordDatapointResponse) Reset()         { *m = RecordDatapointResponse{} }
func (m *RecordDatapointResponse) String() string { return proto.CompactTextString(m) }
func (*RecordDatapointResponse) ProtoMessage()    {}
func (*RecordDatapointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorMetricService, []int{2}
}

func (m *RecordDatapointResponse) GetRejected() []*MetricDatapoint {
	if m != nil {
		return m.Rejected
	}
	return nil
}

type ListDatapointRequest struct {
	Tail           bool                  `protobuf:"varint,1,opt,name=tail,proto3" json:"tail,omitempty"`
	Query          *MetricDatapointQuery `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	Context        *RequestContext       `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
	IncludeInitial bool                  `protobuf:"varint,4,opt,name=include_initial,json=includeInitial,proto3" json:"include_initial,omitempty"`
}

func (m *ListDatapointRequest) Reset()         { *m = ListDatapointRequest{} }
func (m *ListDatapointRequest) String() string { return proto.CompactTextString(m) }
func (*ListDatapointRequest) ProtoMessage()    {}
func (*ListDatapointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMetricService, []int{3}
}

func (m *ListDatapointRequest) GetQuery() *MetricDatapointQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListDatapointRequest) GetContext() *RequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

type ListDatapointResponse struct {
	ResponseType ListDatapointResponse_ListDatapointResponseType `protobuf:"varint,1,opt,name=response_type,json=responseType,proto3,enum=metric.ListDatapointResponse_ListDatapointResponseType" json:"response_type,omitempty"`
	// Null for first message in the response
	Datapoint *MetricDatapoint `protobuf:"bytes,2,opt,name=datapoint" json:"datapoint,omitempty"`
	// Only sent once, subsequent messages will be null on this field
	Series *MetricSeries `protobuf:"bytes,3,opt,name=series" json:"series,omitempty"`
}

func (m *ListDatapointResponse) Reset()         { *m = ListDatapointResponse{} }
func (m *ListDatapointResponse) String() string { return proto.CompactTextString(m) }
func (*ListDatapointResponse) ProtoMessage()    {}
func (*ListDatapointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorMetricService, []int{4}
}

func (m *ListDatapointResponse) GetDatapoint() *MetricDatapoint {
	if m != nil {
		return m.Datapoint
	}
	return nil
}

func (m *ListDatapointResponse) GetSeries() *MetricSeries {
	if m != nil {
		return m.Series
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestContext)(nil), "metric.RequestContext")
	proto.RegisterType((*RecordDatapointRequest)(nil), "metric.RecordDatapointRequest")
	proto.RegisterType((*RecordDatapointResponse)(nil), "metric.RecordDatapointResponse")
	proto.RegisterType((*ListDatapointRequest)(nil), "metric.ListDatapointRequest")
	proto.RegisterType((*ListDatapointResponse)(nil), "metric.ListDatapointResponse")
	proto.RegisterEnum("metric.ListDatapointResponse_ListDatapointResponseType", ListDatapointResponse_ListDatapointResponseType_name, ListDatapointResponse_ListDatapointResponseType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MetricService service

type MetricServiceClient interface {
	// Record datapoint calls
	RecordDatapoint(ctx context.Context, in *RecordDatapointRequest, opts ...grpc.CallOption) (*RecordDatapointResponse, error)
	RecordDatapointStream(ctx context.Context, opts ...grpc.CallOption) (MetricService_RecordDatapointStreamClient, error)
	// List datapoint calls
	ListDatapoint(ctx context.Context, in *ListDatapointRequest, opts ...grpc.CallOption) (MetricService_ListDatapointClient, error)
}

type metricServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetricServiceClient(cc *grpc.ClientConn) MetricServiceClient {
	return &metricServiceClient{cc}
}

func (c *metricServiceClient) RecordDatapoint(ctx context.Context, in *RecordDatapointRequest, opts ...grpc.CallOption) (*RecordDatapointResponse, error) {
	out := new(RecordDatapointResponse)
	err := grpc.Invoke(ctx, "/metric.MetricService/RecordDatapoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) RecordDatapointStream(ctx context.Context, opts ...grpc.CallOption) (MetricService_RecordDatapointStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MetricService_serviceDesc.Streams[0], c.cc, "/metric.MetricService/RecordDatapointStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricServiceRecordDatapointStreamClient{stream}
	return x, nil
}

type MetricService_RecordDatapointStreamClient interface {
	Send(*RecordDatapointRequest) error
	CloseAndRecv() (*RecordDatapointResponse, error)
	grpc.ClientStream
}

type metricServiceRecordDatapointStreamClient struct {
	grpc.ClientStream
}

func (x *metricServiceRecordDatapointStreamClient) Send(m *RecordDatapointRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricServiceRecordDatapointStreamClient) CloseAndRecv() (*RecordDatapointResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RecordDatapointResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricServiceClient) ListDatapoint(ctx context.Context, in *ListDatapointRequest, opts ...grpc.CallOption) (MetricService_ListDatapointClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MetricService_serviceDesc.Streams[1], c.cc, "/metric.MetricService/ListDatapoint", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricServiceListDatapointClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetricService_ListDatapointClient interface {
	Recv() (*ListDatapointResponse, error)
	grpc.ClientStream
}

type metricServiceListDatapointClient struct {
	grpc.ClientStream
}

func (x *metricServiceListDatapointClient) Recv() (*ListDatapointResponse, error) {
	m := new(ListDatapointResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MetricService service

type MetricServiceServer interface {
	// Record datapoint calls
	RecordDatapoint(context.Context, *RecordDatapointRequest) (*RecordDatapointResponse, error)
	RecordDatapointStream(MetricService_RecordDatapointStreamServer) error
	// List datapoint calls
	ListDatapoint(*ListDatapointRequest, MetricService_ListDatapointServer) error
}

func RegisterMetricServiceServer(s *grpc.Server, srv MetricServiceServer) {
	s.RegisterService(&_MetricService_serviceDesc, srv)
}

func _MetricService_RecordDatapoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDatapointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).RecordDatapoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metric.MetricService/RecordDatapoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).RecordDatapoint(ctx, req.(*RecordDatapointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_RecordDatapointStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricServiceServer).RecordDatapointStream(&metricServiceRecordDatapointStreamServer{stream})
}

type MetricService_RecordDatapointStreamServer interface {
	SendAndClose(*RecordDatapointResponse) error
	Recv() (*RecordDatapointRequest, error)
	grpc.ServerStream
}

type metricServiceRecordDatapointStreamServer struct {
	grpc.ServerStream
}

func (x *metricServiceRecordDatapointStreamServer) SendAndClose(m *RecordDatapointResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricServiceRecordDatapointStreamServer) Recv() (*RecordDatapointRequest, error) {
	m := new(RecordDatapointRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetricService_ListDatapoint_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDatapointRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricServiceServer).ListDatapoint(m, &metricServiceListDatapointServer{stream})
}

type MetricService_ListDatapointServer interface {
	Send(*ListDatapointResponse) error
	grpc.ServerStream
}

type metricServiceListDatapointServer struct {
	grpc.ServerStream
}

func (x *metricServiceListDatapointServer) Send(m *ListDatapointResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MetricService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metric.MetricService",
	HandlerType: (*MetricServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordDatapoint",
			Handler:    _MetricService_RecordDatapoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordDatapointStream",
			Handler:       _MetricService_RecordDatapointStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListDatapoint",
			Handler:       _MetricService_ListDatapoint_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptorMetricService,
}

func (m *RequestContext) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestContext) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Identifier != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMetricService(data, i, uint64(m.Identifier.Size()))
		n1, err := m.Identifier.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RecordDatapointRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RecordDatapointRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Context != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMetricService(data, i, uint64(m.Context.Size()))
		n2, err := m.Context.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Datapoint != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMetricService(data, i, uint64(m.Datapoint.Size()))
		n3, err := m.Datapoint.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *RecordDatapointResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RecordDatapointResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumRecorded != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMetricService(data, i, uint64(m.NumRecorded))
	}
	if len(m.Rejected) > 0 {
		for _, msg := range m.Rejected {
			data[i] = 0x12
			i++
			i = encodeVarintMetricService(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListDatapointRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListDatapointRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tail {
		data[i] = 0x8
		i++
		if m.Tail {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Query != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMetricService(data, i, uint64(m.Query.Size()))
		n4, err := m.Query.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Context != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintMetricService(data, i, uint64(m.Context.Size()))
		n5, err := m.Context.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.IncludeInitial {
		data[i] = 0x20
		i++
		if m.IncludeInitial {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ListDatapointResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListDatapointResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResponseType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMetricService(data, i, uint64(m.ResponseType))
	}
	if m.Datapoint != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMetricService(data, i, uint64(m.Datapoint.Size()))
		n6, err := m.Datapoint.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Series != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintMetricService(data, i, uint64(m.Series.Size()))
		n7, err := m.Series.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeFixed64MetricService(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32MetricService(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMetricService(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *RequestContext) Size() (n int) {
	var l int
	_ = l
	if m.Identifier != nil {
		l = m.Identifier.Size()
		n += 1 + l + sovMetricService(uint64(l))
	}
	return n
}

func (m *RecordDatapointRequest) Size() (n int) {
	var l int
	_ = l
	if m.Context != nil {
		l = m.Context.Size()
		n += 1 + l + sovMetricService(uint64(l))
	}
	if m.Datapoint != nil {
		l = m.Datapoint.Size()
		n += 1 + l + sovMetricService(uint64(l))
	}
	return n
}

func (m *RecordDatapointResponse) Size() (n int) {
	var l int
	_ = l
	if m.NumRecorded != 0 {
		n += 1 + sovMetricService(uint64(m.NumRecorded))
	}
	if len(m.Rejected) > 0 {
		for _, e := range m.Rejected {
			l = e.Size()
			n += 1 + l + sovMetricService(uint64(l))
		}
	}
	return n
}

func (m *ListDatapointRequest) Size() (n int) {
	var l int
	_ = l
	if m.Tail {
		n += 2
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovMetricService(uint64(l))
	}
	if m.Context != nil {
		l = m.Context.Size()
		n += 1 + l + sovMetricService(uint64(l))
	}
	if m.IncludeInitial {
		n += 2
	}
	return n
}

func (m *ListDatapointResponse) Size() (n int) {
	var l int
	_ = l
	if m.ResponseType != 0 {
		n += 1 + sovMetricService(uint64(m.ResponseType))
	}
	if m.Datapoint != nil {
		l = m.Datapoint.Size()
		n += 1 + l + sovMetricService(uint64(l))
	}
	if m.Series != nil {
		l = m.Series.Size()
		n += 1 + l + sovMetricService(uint64(l))
	}
	return n
}

func sovMetricService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetricService(x uint64) (n int) {
	return sovMetricService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestContext) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetricService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetricService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Identifier == nil {
				m.Identifier = &MetricIdentifier{}
			}
			if err := m.Identifier.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetricService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetricService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordDatapointRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetricService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordDatapointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordDatapointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetricService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Context == nil {
				m.Context = &RequestContext{}
			}
			if err := m.Context.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datapoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetricService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Datapoint == nil {
				m.Datapoint = &MetricDatapoint{}
			}
			if err := m.Datapoint.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetricService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetricService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordDatapointResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetricService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordDatapointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordDatapointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRecorded", wireType)
			}
			m.NumRecorded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NumRecorded |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rejected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetricService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rejected = append(m.Rejected, &MetricDatapoint{})
			if err := m.Rejected[len(m.Rejected)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetricService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetricService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDatapointRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetricService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDatapointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDatapointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tail = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetricService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &MetricDatapointQuery{}
			}
			if err := m.Query.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetricService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Context == nil {
				m.Context = &RequestContext{}
			}
			if err := m.Context.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeInitial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeInitial = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetricService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetricService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDatapointResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetricService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDatapointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDatapointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseType", wireType)
			}
			m.ResponseType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ResponseType |= (ListDatapointResponse_ListDatapointResponseType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datapoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetricService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Datapoint == nil {
				m.Datapoint = &MetricDatapoint{}
			}
			if err := m.Datapoint.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetricService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Series == nil {
				m.Series = &MetricSeries{}
			}
			if err := m.Series.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetricService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetricService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetricService(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetricService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetricService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetricService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetricService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetricService(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetricService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetricService   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorMetricService = []byte{
	// 614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xfe, 0xed, 0x5e, 0xfe, 0x72, 0x7a, 0x8b, 0x46, 0x6d, 0x9a, 0x46, 0xbd, 0xe1, 0x0d, 0x15,
	0xa2, 0x75, 0x49, 0x55, 0x81, 0x90, 0x58, 0x84, 0xda, 0x0b, 0xa3, 0x00, 0x65, 0x9c, 0x15, 0x42,
	0xb2, 0x1c, 0x67, 0x92, 0x0e, 0x24, 0x9e, 0x74, 0x3c, 0xae, 0xe8, 0x12, 0x96, 0x6c, 0x79, 0x1a,
	0xde, 0x80, 0x1d, 0x48, 0xbc, 0x00, 0x42, 0x48, 0xbc, 0x06, 0xd3, 0xf1, 0xe4, 0xda, 0xa4, 0xe2,
	0xb2, 0xb0, 0x66, 0xe6, 0x3b, 0xdf, 0x39, 0xe7, 0x3b, 0x67, 0x8e, 0x07, 0x1e, 0x36, 0xa9, 0x38,
	0x4d, 0x6b, 0xfb, 0x11, 0x6b, 0xdb, 0x8d, 0x34, 0x21, 0x9c, 0xd5, 0x98, 0xa0, 0x51, 0x62, 0x73,
	0x22, 0x4e, 0x69, 0xfc, 0x5a, 0x24, 0x76, 0x9b, 0x08, 0x4e, 0x23, 0xbd, 0xec, 0x49, 0xca, 0x39,
	0x8d, 0xc8, 0x7e, 0x87, 0x33, 0xc1, 0xd0, 0x6c, 0x86, 0x16, 0x37, 0x9a, 0x8c, 0x35, 0x5b, 0xc4,
	0x0e, 0x3b, 0xd4, 0x0e, 0xe3, 0x98, 0x89, 0x50, 0x50, 0x16, 0x27, 0x19, 0xab, 0xb8, 0x37, 0x90,
	0xa4, 0xc9, 0x9a, 0xcc, 0x56, 0x70, 0x2d, 0x6d, 0xa8, 0x93, 0x3a, 0xa8, 0x9d, 0xa6, 0x1f, 0xfd,
	0xa1, 0xa6, 0xcc, 0xcd, 0x7a, 0x0c, 0x4b, 0x98, 0x9c, 0xa5, 0x24, 0x11, 0xc7, 0x2c, 0x16, 0xe4,
	0x8d, 0x40, 0xf7, 0x01, 0x68, 0x9d, 0xc4, 0x82, 0x36, 0x28, 0xe1, 0x05, 0x63, 0xc7, 0xd8, 0x9d,
	0x2f, 0x15, 0xf6, 0xb5, 0xd3, 0x13, 0xb5, 0x78, 0x3d, 0x3b, 0x1e, 0xe0, 0x5a, 0x6f, 0x0d, 0xc8,
	0x63, 0x12, 0x31, 0x5e, 0x77, 0x42, 0x11, 0x76, 0x18, 0x8d, 0x85, 0x8e, 0x8d, 0x0e, 0xe0, 0xff,
	0x28, 0x8b, 0xaf, 0x23, 0xe6, 0xbb, 0x11, 0x87, 0xb3, 0xe3, 0x2e, 0x0d, 0x1d, 0xc1, 0x8d, 0x7a,
	0x37, 0x4a, 0xc1, 0x54, 0x3e, 0x6b, 0xc3, 0x2a, 0xfa, 0x49, 0xfa, 0x4c, 0xeb, 0x0c, 0xd6, 0xae,
	0x48, 0x48, 0x3a, 0xb2, 0xab, 0x04, 0xdd, 0x84, 0x85, 0x38, 0x6d, 0x07, 0x5c, 0x99, 0x49, 0x5d,
	0x09, 0x99, 0xc1, 0xf3, 0x12, 0xc3, 0x1a, 0x42, 0x87, 0x30, 0xc7, 0xc9, 0x2b, 0x12, 0x09, 0x69,
	0x36, 0x77, 0xa6, 0xae, 0xcb, 0xd9, 0x23, 0x5a, 0x1f, 0x0d, 0x58, 0xa9, 0xd0, 0x44, 0x5c, 0x29,
	0x1a, 0xc1, 0xb4, 0x08, 0x69, 0x4b, 0x25, 0x9a, 0xc3, 0x6a, 0x8f, 0x4a, 0x30, 0x23, 0x8d, 0xfc,
	0x42, 0x97, 0xb4, 0x31, 0x21, 0xfc, 0xf3, 0x4b, 0x0e, 0xce, 0xa8, 0x83, 0xcd, 0x9b, 0xfa, 0xbd,
	0xe6, 0xdd, 0x82, 0x65, 0x1a, 0x47, 0xad, 0xb4, 0x4e, 0x02, 0x1a, 0x53, 0x41, 0xc3, 0x56, 0x61,
	0x5a, 0x89, 0x58, 0xd2, 0xb0, 0x97, 0xa1, 0xd6, 0x4f, 0x13, 0x56, 0x47, 0xb4, 0xeb, 0x6e, 0xbd,
	0x84, 0x45, 0xae, 0xf7, 0x81, 0xb8, 0xe8, 0x10, 0x55, 0xc5, 0x52, 0xe9, 0x5e, 0x37, 0xf5, 0x58,
	0xaf, 0xf1, 0x68, 0x55, 0xba, 0xe3, 0x05, 0x3e, 0x70, 0xfa, 0xcb, 0xdb, 0x45, 0x77, 0x60, 0x56,
	0x4e, 0x36, 0x25, 0x89, 0x6e, 0xc4, 0xca, 0xb0, 0x8f, 0xaf, 0x6c, 0x58, 0x73, 0xac, 0xf7, 0x06,
	0xac, 0x4f, 0x14, 0x24, 0xc7, 0x61, 0xb3, 0xe2, 0xf9, 0xd5, 0xc0, 0x29, 0x57, 0xcb, 0x27, 0xcf,
	0xbc, 0xa7, 0xd5, 0xc0, 0x77, 0xb1, 0xe7, 0xfa, 0x81, 0xe3, 0x56, 0xcb, 0x5e, 0xc5, 0xcf, 0xfd,
	0x87, 0xf2, 0x80, 0x46, 0x28, 0x65, 0xc7, 0xc9, 0x19, 0x63, 0x70, 0xc7, 0xad, 0xe4, 0x4c, 0x54,
	0x84, 0xfc, 0x08, 0x8e, 0xdd, 0x93, 0x4a, 0xf9, 0xd8, 0xcd, 0x4d, 0x95, 0x3e, 0x9b, 0xb0, 0xd8,
	0x53, 0x79, 0xf9, 0x18, 0xa0, 0x04, 0x96, 0x47, 0x46, 0x15, 0x6d, 0xf5, 0x2f, 0x76, 0xdc, 0x6f,
	0x54, 0xdc, 0x9e, 0x68, 0xcf, 0x0a, 0xb3, 0xb6, 0xdf, 0x7d, 0xfd, 0xf1, 0xc1, 0x5c, 0xb7, 0x56,
	0xec, 0xf3, 0xbb, 0x76, 0xaf, 0x6f, 0x76, 0x36, 0xf3, 0x0f, 0x8c, 0xdb, 0xe8, 0x05, 0xac, 0x8e,
	0xf8, 0xfa, 0x82, 0x93, 0xb0, 0xfd, 0xcf, 0xa9, 0x77, 0x0d, 0xd4, 0x86, 0xc5, 0xa1, 0x76, 0xa3,
	0x8d, 0x09, 0xc3, 0x92, 0x45, 0xdc, 0xbc, 0x76, 0x94, 0xac, 0x4d, 0x55, 0xca, 0x9a, 0x85, 0x86,
	0x4b, 0x69, 0x49, 0xb2, 0x2c, 0xe4, 0xc0, 0x78, 0xb4, 0xf0, 0xe9, 0xfb, 0x96, 0xf1, 0x45, 0x7e,
	0xdf, 0xe4, 0x57, 0x9b, 0x55, 0xef, 0xd9, 0xe1, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0x5b,
	0xa6, 0xc5, 0x9c, 0x05, 0x00, 0x00,
}
